CREATE DATABASE VETERINARIA
GO

USE VETERINARIA
GO

--USE MASTER
--DROP DATABASE VETERINARIA
--SELECT * FROM PRODUCTO

BEGIN TRY 
BEGIN TRANSACTION
    CREATE TABLE CLIENTE
(
    ID_CLIENTE INT IDENTITY (1,1) NOT NULL CONSTRAINT PK_CLIENTE PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDO1 VARCHAR(20) NOT NULL,
    APELLIDO2 VARCHAR(20) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    TELEFONO VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(50),
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_C DEFAULT 0
)

    CREATE TABLE VENDEDOR
(
    ID_VENDEDOR INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_VENDEDOR PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDO1 VARCHAR(20) NOT NULL,
    APELLIDO2 VARCHAR(20) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL CONSTRAINT DF_FECHA_NAC_V DEFAULT GETDATE(),
    TELEFONO VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(50) NULL,
    USUARIO VARCHAR(20) NULL,
    CONTRASENA VARCHAR(15) NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_VEN DEFAULT 0
)

    CREATE TABLE VETERINARIO
(
    ID_VETERINARIO INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_VETERINARIO PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDO1 VARCHAR(20) NOT NULL,
    APELLIDO2 VARCHAR(20) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    TELEFONO VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(50),
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_VET DEFAULT 0
)
    

    CREATE TABLE PRODUCTO
(
    ID_PRODUCTO INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_PRODUCTO PRIMARY KEY,
    DESCRIPCION VARCHAR(100) NOT NULL,
    CATEGORIA VARCHAR(20) NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    DESCUENTO DECIMAL(10,2) NOT NULL,
    EXISTENCIA INT NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_PROD DEFAULT 0
)

    CREATE TABLE PROVEEDOR
(
    ID_PROVEEDOR INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_PROVEEDOR PRIMARY KEY,
    NOMBRE_COMERCIAL VARCHAR(50) NOT NULL,
    DIRECCION VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(20) NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_PROV DEFAULT 0
)

    CREATE TABLE PRODUCTO_PROVEEDOR
(
    ID_PRODUCTO INT NOT NULL CONSTRAINT PK_PRODUCTO_P PRIMARY KEY,
    ID_PROVEEDOR INT NOT NULL,
    DESCRIPCION VARCHAR(100) NOT NULL,
    CATEGORIA VARCHAR(10) NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_PROD_P DEFAULT 0
        --REFERENCES
        CONSTRAINT FK_P_PROVEEDOR FOREIGN KEY(ID_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR)
)

    CREATE TABLE ANIMAL
(
    ID_ANIMAL INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_ANIMAL PRIMARY KEY,
    ID_CLIENTE INT NOT NULL,
    ALIAS VARCHAR(30) NOT NULL,
    ESPECIE VARCHAR(30) NOT NULL,
    RAZA VARCHAR(30) NOT NULL    ,
    COLOR VARCHAR(30) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL CONSTRAINT DF_NACIMIENTO DEFAULT GETDATE(),
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_AN DEFAULT 0,
    --REFERENCES
    CONSTRAINT FK_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
)

    CREATE TABLE HISTORIA
(
    ID_HISTORIA INT IDENTITY(1,1) NOT NULL CONSTRAINT PkK_HISTORIA PRIMARY KEY,
    ID_ANIMAL INT NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_HIS DEFAULT 0
)

    CREATE TABLE FACTURA_COMPRA
(
    ID_COMPRA INT IDENTITY(1,1) NOT NULL CONSTRAINT PK_FACTURA_C PRIMARY KEY,
    FECHA DATETIME NOT NULL CONSTRAINT DF_FACTURA_FECHA_C DEFAULT GETDATE(),
    ID_VENDEDOR INT NOT NULL CONSTRAINT DF_FC_VENDEDOR DEFAULT 0,
    ID_PROVEEDOR INT NOT NULL CONSTRAINT DF_FC_PROVEEDOR DEFAULT 0,
    TIPO VARCHAR(10) NOT NULL CONSTRAINT CK_TIPO_FAC_C CHECK(TIPO IN ('CONTADO', 'CREDITO'))
        CONSTRAINT DF_TIPO_FAC_C  DEFAULT 'CONTADO',
    IMPORTE DECIMAL(10,2) NOT NULL,
    DESCUENTO DECIMAL(10,2) NOT NULL,
    ESTADO VARCHAR(10) NOT NULL CONSTRAINT CK_ESTADO_COM CHECK(ESTADO IN('PENDIENTE', 'CANCELADO'))
        CONSTRAINT DF_ESTADO_FAC_C DEFAULT 'PENDIENTE',
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_FC DEFAULT 0,
    --REFERENCES

)

    CREATE TABLE FACTURA_VENTA
(

    ID_VENTA INT NOT NULL CONSTRAINT PK_FACTURA_V PRIMARY KEY,
    FECHA DATETIME NOT NULL CONSTRAINT DF_FACTURA_FECHA_V DEFAULT GETDATE(),
    ID_VENDEDOR INT NOT NULL CONSTRAINT DF_FV_VENDEDOR DEFAULT 0,
    ID_CLIENTE INT NOT NULL CONSTRAINT DF_FV_CLIENTE DEFAULT 0,
    TIPO VARCHAR(10) NOT NULL CONSTRAINT CK_TIPO_FAC_V CHECK(TIPO IN ('CONTADO', 'CREDITO'))
        CONSTRAINT DF_TIPO_FAC_V  DEFAULT 'CONTADO',
    DESCUENTO DECIMAL(10,2) NOT NULL CONSTRAINT DF_DESCUENT_VENTA DEFAULT 0,
    IMPORTE DECIMAL(10,2) NOT NULL CONSTRAINT DF_IMPORTE DEFAULT 0,
    ESTADO VARCHAR(10) NOT NULL CONSTRAINT CK_ESTADO_VEN CHECK(ESTADO IN('PENDIENTE', 'CANCELADO')and ESTADO = upper(ESTADO))
        CONSTRAINT DF_ESTADO_FAC_V DEFAULT 'PENDIENTE',
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_FV DEFAULT 0,
    --REFERENCES

)

    CREATE TABLE DETALLE_VENTA
(
    ID_VENTA INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    ID_VETERINARIO INT NOT NULL CONSTRAINT DF_VETER DEFAULT 0,
    ID_ANIMAL INT NOT NULL CONSTRAINT DF_ANIM DEFAULT 0,
    CANTIDAD INT NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    DESCUENTO DECIMAL(10,2) NOT NULL,
    TOTAL DECIMAL(10,2) NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_DV DEFAULT 0,
    --REFERENCES
    CONSTRAINT PK_DETAL_SERV PRIMARY KEY (ID_VENTA, ID_PRODUCTO),
    CONSTRAINT FK_PRODUCTO FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO),
    CONSTRAINT FK_VENTA FOREIGN KEY(ID_VENTA) REFERENCES FACTURA_VENTA(ID_VENTA)
)

    

    CREATE TABLE DETALLE_COMPRA
(
    ID_COMPRA INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    ID_PROVEEDOR INT NOT NULL,
    CANTIDAD INT NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    DESCUENTO DECIMAL(10,2) NOT NULL,
    TOTAL DECIMAL(10,2) NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_DC DEFAULT 0
)

    CREATE TABLE DETALLE_HISTORIA
(
    ID_HISTORIA INT NOT NULL,
    FECHA DATE NOT NULL CONSTRAINT DF_DET_FECHA DEFAULT GETDATE(),
    DESCRIPCION VARCHAR(100) NOT NULL,
    PESO DECIMAL(10,2) NOT NULL,
    BORRADO_E BIT NOT NULL CONSTRAINT DF_BORRADO_DET_HIS DEFAULT 0,
    --REFERENCES
    CONSTRAINT PK_DET_HISTORIA PRIMARY KEY (ID_HISTORIA, FECHA),
    CONSTRAINT FK_HISTORIA FOREIGN KEY(ID_HISTORIA) REFERENCES HISTORIA(ID_HISTORIA)
)


COMMIT TRANSACTION
END TRY
BEGIN CATCH
    PRINT 'HUBO ERROR';
    THROW
    ROLLBACK TRANSACTION
END CATCH

INSERT INTO CLIENTE
    (NOMBRE,APELLIDO1,APELLIDO2,FECHA_NACIMIENTO,TELEFONO,EMAIL)
VALUES
    ('STEVEN', 'SOZA', 'MALIANO', '1994-06-18', '72171608', 'SOZATEV@GMAIL.COM'),
    ('SIN NOMBRE', '', '', '', '', ''),
    ('MARTIN', 'SOLANO', 'CUÑA', '1997-03-18', '28395493', 'CARLSA.COM'),
    ('JUAN', 'PEREZ', 'QUINCHO', '1994-06-18', '82348283', 'MATMAIL.COM'),
    ('PEDRO', 'SPROUL', 'WILLIAMS', '1994-06-18', '82348283', 'JUAN@GMAIL.COM'),
    ('ANDREW', 'ZELEDON', 'ARROYO', '1994-06-18', '28495034', 'FANDON@GMAIL.COM'),
    ('MAIKOL', 'PEREZ', 'QUINCHO', '1994-06-18', '82348283', 'MAIKOL@GMAIL.COM'),
    ('MARIA', 'SALAS', 'MIRANDA', '1954-03-18', '45346564', 'MAR@GMAIL.COM')


INSERT INTO VENDEDOR
    (NOMBRE, APELLIDO1, APELLIDO2, FECHA_NACIMIENTO, TELEFONO, EMAIL, USUARIO, CONTRASENA)
VALUES
    ('Bernie', 'Mataki', 'cole', GETDATE(), '28374829', 'ber@gmail.com', 'Bern22', '1234')

INSERT INTO VENDEDOR
    (NOMBRE, APELLIDO1, APELLIDO2, FECHA_NACIMIENTO, TELEFONO, EMAIL)
VALUES
    ('FRANCISO', 'LORIA', 'AGUILAR', '1990-03-22', '23859403', 'FRANSUPR@GMAIL.COM'),
    ('MARCO', 'MENDEZ', 'PEREZ', '1990-03-22', '23859403', 'MARME@GMAIL.COM'),
    ('JIMENA', 'GARCIA', 'LOPEZ', '1990-03-22', '23859403', 'JIMGARE@GMAIL.COM'),
    ('YANCI', 'VILLALTA', 'PEREZ', '1990-03-22', '23859403', 'VILLATA@GMAIL.COM'),
    ('MARCO', 'SUARÉZ', 'PEREZ', '1990-03-22', '23859403', 'FRANSUPR@GMAIL.COM')

INSERT INTO PRODUCTO
    (DESCRIPCION, CATEGORIA, PRECIO, DESCUENTO, EXISTENCIA)
VALUES
    ('Super can', 'Alimento', 20000, 0.0, 30),
    ('Collar', 'Articulo', 6000, 0.0, 30),
    ('Vacuna', 'Medicamento', 10000, 0.0, 0),
    ('Acetonil', 'Medicamento', 15000, 0.0, 100),
    ('Ascan', 'Alimento', 25000, 0.0, 20)

INSERT INTO VETERINARIO
    (NOMBRE, APELLIDO1, APELLIDO2, FECHA_NACIMIENTO, TELEFONO, EMAIL)
VALUES
    ('Federico', 'Lopéz', 'Moreira', '1987-06-18', '38573949', 'FEDE@GMAIL.COM'),
    ('Mariam', 'Salas', 'Bonilla', '1987-06-18', '365763234', 'asd@GMAIL.COM'),
    ('Felipe', 'Garcia', 'Nuñez', '1987-06-18', '365763234', 'A34fdsa@GMAIL.COM'),
    ('Malcom', 'Vargas', 'Marin', '1987-06-18', '365763234', '45sfgsd@GMAIL.COM'),
    ('Arnoldo', 'Salas', 'Jimenéz', '1987-06-18', '365763234', 'sdf45I@GMAIL.COM')

INSERT INTO ANIMAL
    (ID_CLIENTE, ALIAS, ESPECIE, RAZA, COLOR, FECHA_NACIMIENTO)
VALUES
    (1, 'ROLLY', 'PERRO', 'ROTTWAILER', 'NEGRO', '2018-05-28'),
    (2, 'MISINGO', 'GATO', 'COMUN', 'RAYAS AMARILLAS', '2013-05-28'),
    (7, 'BRUNO', 'HAMSTER', 'COMUN', 'CAFE', '2015-05-28'),
    (7, 'MISCO', 'TORTUGA', 'COMUN', 'CAFE', '2015-05-28'),
    (3, 'MERLI', 'GATO', 'COMUN', 'CAFE', '2015-05-28'),
    (4, 'BRACO', 'PERRO', 'COMUN', 'CAFE', '2015-05-28'),
    (5, 'BANI', 'ARAÑA', 'COMUN', 'CAFE', '2015-05-28'),
    (6, 'MUSGO', 'PERRO', 'COMUN', 'CAFE', '2015-05-28'),
    (5, 'FENIX', 'PERRO', 'COMUN', 'CAFE', '2015-05-28')

GO
CREATE OR ALTER TRIGGER ACT_INVENTARIO
ON DETALLE_VENTA AFTER INSERT
AS
--DECLARAR VARIABLES
DECLARE @id_producto int, @cantidad int
SELECT @cantidad = CANTIDAD
FROM inserted

--ASIGNAR PRODUCTO
SELECT @id_producto = ID_PRODUCTO
FROM inserted

--ACTUALIZAR EXISTENCIA
UPDATE PRODUCTO
SET EXISTENCIA = EXISTENCIA - @cantidad
WHERE ID_PRODUCTO = @id_producto

GO--** TRIGGER PARA ACTUALIZAR DETALLES EN CASO DE QUE LO REQUIERA
CREATE OR ALTER TRIGGER ACT_DETALLE
ON DETALLE_VENTA INSTEAD OF INSERT
AS
BEGIN
    --DECLARAR VARIABLES
    DECLARE @ID_PRODUCTO INT, @ID_FACTURA INT, @ID_VETERINARIO INT, @ANIMAL INT, @CANTIDAD INT,
    @PRECIO DECIMAL, @DESCUENTO DECIMAL, @TOTAL DECIMAL

    --ASIGNAR VALORES
    SELECT @ID_FACTURA = ID_VENTA
    FROM inserted
    SELECT @ID_PRODUCTO = ID_PRODUCTO
    FROM inserted
    SELECT @ID_VETERINARIO = ID_VETERINARIO
    FROM inserted
    SELECT @ANIMAL = ID_ANIMAL
    FROM inserted
    SELECT @CANTIDAD = CANTIDAD
    FROM inserted
    SELECT @PRECIO = PRECIO
    FROM inserted
    SELECT @DESCUENTO = DESCUENTO
    FROM inserted
    SELECT @TOTAL = TOTAL
    FROM inserted

    IF EXISTS(SELECT 1
    FROM DETALLE_VENTA
    WHERE ID_PRODUCTO=@ID_PRODUCTO AND ID_VENTA = @ID_FACTURA)
        BEGIN
        UPDATE DETALLE_VENTA 
            SET CANTIDAD = CANTIDAD + @CANTIDAD, TOTAL = (CANTIDAD+@CANTIDAD)*PRECIO
            WHERE ID_PRODUCTO = @ID_PRODUCTO AND ID_VENTA = @ID_FACTURA

        UPDATE FACTURA_VENTA
    SET IMPORTE = IMPORTE +(@CANTIDAD*(SELECT PRECIO
        FROM PRODUCTO
        WHERE ID_PRODUCTO= @ID_PRODUCTO))
    WHERE ID_VENTA = @ID_FACTURA


        UPDATE PRODUCTO
    SET EXISTENCIA = EXISTENCIA -@CANTIDAD
    WHERE ID_PRODUCTO = @ID_PRODUCTO

    END
    ELSE
        BEGIN
        INSERT INTO DETALLE_VENTA
            (ID_VENTA, ID_PRODUCTO, ID_VETERINARIO, ID_ANIMAL, CANTIDAD, PRECIO, DESCUENTO, TOTAL)
        VALUES(@ID_FACTURA, @ID_PRODUCTO, @ID_VETERINARIO, @ANIMAL, @CANTIDAD, @PRECIO, @DESCUENTO, @TOTAL)

        UPDATE FACTURA_VENTA
    SET IMPORTE = IMPORTE + ((SELECT CANTIDAD
        FROM DETALLE_VENTA
        WHERE ID_PRODUCTO = @ID_PRODUCTO AND ID_VENTA = @ID_FACTURA)*(SELECT PRECIO
        FROM PRODUCTO
        WHERE ID_PRODUCTO= @ID_PRODUCTO))
    WHERE ID_VENTA = @ID_FACTURA
    END
END
--FIN DEL TRIGGER ACTUALIZAR DETALLE   



GO
CREATE OR ALTER PROCEDURE REV_FACTURA
    @id_factura int OUT,
    @fecha DATETIME,
    @resultado Varchar(100) OUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            IF EXISTS(SELECT 1
    FROM FACTURA_VENTA)
            BEGIN
        --selecciono la factura más nueva
        select @id_factura = max(ID_VENTA)
        FROM FACTURA_VENTA
        --no aseguramos que la factura no tenga vendedor
        IF EXISTS(SELECT ID_VENTA
        FROM FACTURA_VENTA
        WHERE ID_VENTA = @id_factura AND ID_CLIENTE = 0 
                 )
                BEGIN
            SELECT @id_factura = ID_VENTA
            FROM FACTURA_VENTA
            WHERE ID_VENTA = @id_factura
        END
                ELSE 
                BEGIN
            set @id_factura = @id_factura+1
        END
    END
            ELSE
            BEGIN
        SET @id_factura = 1
    END

            INSERT INTO FACTURA_VENTA
        (ID_VENTA, FECHA)
    VALUES(@id_factura, @fecha)
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        SET @resultado = 'No se pudo insertar'
        ROLLBACK TRANSACTION
    END CATCH
END


go
CREATE OR ALTER PROCEDURE insertarVendedor
    @id_vendedor int OUT,
    @nombre varchar(20),
    @apellido1 varchar(20),
    @apellido2 varchar(20),
    @usuario varchar(20),
    @contrasena varchar(15),
    @email varchar(50),
    @telefono varchar(15),
    @msg varchar(100) OUT
as
BEGIN
    if exists(select 1
    from VENDEDOR
    where usuario = @usuario)
begin
        set @msg = 'Ya hay un usuario con ese nombre, intentelo de nuevo'
    end
else
begin
        insert into VENDEDOR
            (NOMBRE, APELLIDO1, APELLIDO2, USUARIO, CONTRASENA, EMAIL, TELEFONO)
        VALUES(@nombre, @apellido1, @apellido2, @usuario, @contrasena, @email, @telefono)
        set @msg = 'Usuario ingresado satisfactoriamente'
    end
end


go
CREATE OR ALTER PROCEDURE eliminar_detalle
    @resultado int out,
    @id_venta int,
    @id_producto int,
    @msg varchar(100) OUT
AS
begin
    declare @cantidadDevolver int
    set @resultado = -1
    if exists (select 1
    from DETALLE_VENTA
    where ID_VENTA = @id_venta and ID_PRODUCTO = @id_producto)
    begin
        --si el detalle existe vamos a coger la cantidad
        --para devolverla a la existencia del producto
        SELECT @cantidadDevolver = CANTIDAD
        FROM DETALLE_VENTA
        WHERE 
        ID_PRODUCTO = @id_producto AND ID_VENTA = @id_venta
        --aca borramos el detalle
        DELETE FROM DETALLE_VENTA
        WHERE ID_PRODUCTO = @id_producto AND ID_VENTA = @id_venta
        --aca devolvemos la cantidad al producto
        UPDATE PRODUCTO
        SET EXISTENCIA = EXISTENCIA + @cantidadDevolver
        WHERE ID_PRODUCTO = @id_producto
        --luego verificamos que hayan detalles de esa venta,
        --si no hay, se elimina la venta
        IF NOT EXISTS(SELECT 1
        FROM DETALLE_VENTA
        WHERE ID_VENTA = @id_venta)
        begin
            --aca borramos la venta
            DELETE FROM FACTURA_VENTA WHERE ID_VENTA = @id_venta
            SET @MSG = 'Se elimino el detalle y la factura'
            --seteamos el resultado en 1 si se elimino la venta
            --para luego reconocer que acción fue la que se realizo
            set @resultado = 1

        end
            else 
        begin
            set @msg = 'Se elimino el detalle'
        end
    end 
    else
    begin
        set @msg = 'no se encontro detalle con esa factura'
    end
end

GO
CREATE OR ALTER PROCEDURE ELIMINARCLIENTE
    @resultdo int out,
    @id_cliente int,
    @msg varchar(100) OUT
as
BEGIN
    IF exists(select 1
    from FACTURA_VENTA
    where ID_CLIENTE = @id_cliente and ESTADO = 'PENDIENTE')
        BEGIN
        SET @msg = 'El cliente tiene facturas pendientes, no se puede eliminar'
        set @resultdo = -1
    END
        ELSE
        BEGIN
        DELETE FROM CLIENTE
            WHERE ID_CLIENTE = @id_cliente

        SET @msg= 'Cliente eliminado'
        set @resultdo = 1
    END

END  

    GO
CREATE OR ALTER PROCEDURE ELIMINARPRODUCTO
    @resultado int out,
    @id_producto int,
    @msg varchar(100) OUT
as
BEGIN
    IF exists(select 1
    from DETALLE_VENTA
    where ID_PRODUCTO = @id_producto)
        BEGIN
        SET @msg = 'No se puede eliminar, ya que hay facturas asociadas a este producto'
        set @resultado = -1
    END
        ELSE
        BEGIN
        DELETE FROM PRODUCTO
            WHERE ID_PRODUCTO = @id_producto

        SET @msg= 'Producto eliminado'
        set @resultado = 1
    END

END    

    GO
CREATE OR ALTER PROCEDURE ELIMINARventa
    @resultado int out,
    @id_venta int,
    @msg varchar(100) OUT
as
BEGIN
    IF exists(select 1
    from FACTURA_VENTA
    where ID_VENTA = @id_venta and ESTADO='CANCELADA')
        BEGIN
        SET @msg = 'No se puede eliminar, ya que es una factura cancelada'
        set @resultado = -1
    END
        ELSE
        BEGIN
        DELETE FROM FACTURA_VENTA
            WHERE ID_VENTA = @id_venta

        DELETE FROM DETALLE_VENTA
        WHERE ID_VENTA = @id_venta

        SET @msg= 'Factura eliminada'
        set @resultado = 1
    END

END    